import streamlit as st
import os
import time
from datetime import datetime
import random
import matplotlib.pyplot as plt

# Ensure logs folder exists
os.makedirs("logs", exist_ok=True)

LOG_FILE = "logs/alerts.log"

# Sample alerts
sample_alerts = [
    "Suspicious login pattern",
    "Minor port probe",
    "Unusual app behavior",
    "Unusual outbound traffic",
    "Ransomware signature detected"
]

# Function to auto-generate alerts
def generate_sample_alerts():
    if not os.path.exists(LOG_FILE) or os.path.getsize(LOG_FILE) == 0:
        with open(LOG_FILE, "w") as f:
            for i in range(10):
                timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                alert = random.choice(sample_alerts)
                severity = random.randint(1, 5)
                f.write(f"{timestamp} ALERT: {alert} (Severity: {severity})\n")

# Parse alerts from file
def parse_alerts():
    alerts = []
    if not os.path.exists(LOG_FILE):
        return alerts

    with open(LOG_FILE, "r") as f:
        for line in f:
            if "Severity" in line:
                try:
                    time_part = line.split("]")[0].strip("[")
                    message = line.split("ALERT:")[1].strip()
                    severity = int(message.split("Severity:")[1].strip(")"))
                    alert_type = message.split("(Severity:")[0].strip()
                    alerts.append({
                        "time": time_part,
                        "message": alert_type,
                        "severity": severity
                    })
                except:
                    continue
    return alerts

# Run alert generation
generate_sample_alerts()
alerts = parse_alerts()

# Streamlit dashboard
st.set_page_config(page_title="ThreatWatch360", page_icon="üö®", layout="centered")
st.title("üö® ThreatWatch360 Dashboard")

# Help section
with st.expander("‚ùì Help for New Users"):
    st.markdown("""
    **Welcome to ThreatWatch360!**

    - View real-time security alerts auto-generated by the system  
    - Use the **dropdown** to filter alerts by exact severity level  
    - View the **pie chart** for quick alert type summaries  
    - Click **Download CSV** to export alerts  
    - Page auto-refreshes every 15 seconds
    """)

# Dropdown for severity
selected = st.selectbox("üîç Filter by Severity (optional):", ["All", 1, 2, 3, 4, 5], index=0)

# Filter alerts
if selected != "All":
    alerts = [a for a in alerts if a["severity"] == selected]

# Show alerts
if not alerts:
    st.error("‚ö†Ô∏è No alerts found in log.")
else:
    st.success(f"‚úÖ Showing {len(alerts)} alerts")
    for alert in alerts:
        st.write(f"**[{alert['time']}] Severity {alert['severity']} -** {alert['message']}")

# Pie chart
st.subheader("üìä Alert Type Breakdown")
type_counts = {}
for a in alerts:
    type_counts[a["message"]] = type_counts.get(a["message"], 0) + 1

if type_counts:
    fig, ax = plt.subplots()
    ax.pie(type_counts.values(), labels=type_counts.keys(), autopct="%1.1f%%", startangle=140)
    ax.axis("equal")
    st.pyplot(fig)

# CSV Export
import pandas as pd
df = pd.DataFrame(alerts)
st.download_button("üì• Download CSV", df.to_csv(index=False), "alerts.csv", "text/csv")

# Auto-refresh
st.caption("‚è≥ Auto-refreshes every 15 seconds")
time.sleep(20)
st.rerun()



